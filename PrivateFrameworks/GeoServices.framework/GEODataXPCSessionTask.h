/* Generated by RuntimeBrowser
   Image: /System/Library/PrivateFrameworks/GeoServices.framework/GeoServices
 */

@interface GEODataXPCSessionTask : NSObject <GEODataSessionTask, GEODataSessionUpdatableTask, GEODataXPCSessionTaskQueueTask, GEOStateCapturing> {
    NSObject<OS_os_activity> * _activity;
    bool  _canceled;
    <GEODataSessionTaskDelegate> * _delegate;
    NSObject<OS_dispatch_queue> * _delegateQueue;
    bool  _didNotifyDelegate;
    double  _endTime;
    NSError * _error;
    <NSObject> * _parsedResponse;
    float  _priority;
    NSData * _receivedData;
    GEODataRequest * _request;
    GEODataXPCSession * _session;
    NSObject<OS_dispatch_queue> * _sessionIsolation;
    double  _startTime;
    unsigned long long  _stateCaptureHandle;
    unsigned int  _taskIdentifier;
    NSObject<OS_voucher> * _voucher;
}

@property (nonatomic, readonly) NSObject<OS_os_activity> *activity;
@property (nonatomic, readonly) GEOClientMetrics *clientMetrics;
@property (readonly, copy) NSString *debugDescription;
@property (nonatomic, readonly) <GEODataSessionTaskDelegate> *delegate;
@property (nonatomic, readonly) NSObject<OS_dispatch_queue> *delegateQueue;
@property (readonly, copy) NSString *description;
@property (nonatomic) bool didNotifyDelegate;
@property (readonly) double elapsedTime;
@property (nonatomic, retain) NSError *error;
@property (nonatomic, readonly) bool failedDueToCancel;
@property (readonly) unsigned long long hash;
@property (nonatomic, readonly) unsigned long long incomingPayloadSize;
@property (nonatomic, readonly) bool isCancelled;
@property (nonatomic, readonly) unsigned long long outgoingPayloadSize;
@property (nonatomic, readonly) <NSObject> *parsedResponse;
@property float priority;
@property (nonatomic, readonly) bool protocolBufferHasPreamble;
@property (nonatomic, readonly) NSData *receivedData;
@property (nonatomic, readonly) NSString *remoteAddressAndPort;
@property (nonatomic, readonly) GEODataRequest *request;
@property (nonatomic, readonly) <GEORequestCounterTicket> *requestCounterTicket;
@property (nonatomic, readonly) GEODataXPCSession *session;
@property (nonatomic, readonly) NSObject<OS_dispatch_queue> *sessionIsolation;
@property (readonly) Class superclass;
@property (nonatomic, readonly) unsigned int taskIdentifier;
@property (nonatomic, readonly) unsigned int taskQueue;
@property (nonatomic, readonly) float taskQueuePriority;
@property (nonatomic, readonly) double timeoutInterval;
@property (nonatomic, readonly) NSObject<OS_xpc_object> *xpcRequest;
@property (nonatomic, readonly) unsigned long long xpcRequestIdentifier;

- (void).cxx_destruct;
- (void)_finishAndNotifyDelegate;
- (id)activity;
- (void)cancel;
- (id)captureStateWithHints:(struct os_state_hints_s { unsigned int x1; char *x2; unsigned int x3; unsigned int x4; }*)arg1;
- (id)clientMetrics;
- (void)dealloc;
- (id)delegate;
- (id)delegateQueue;
- (bool)didNotifyDelegate;
- (double)elapsedTime;
- (id)error;
- (bool)failedDueToCancel;
- (unsigned long long)incomingPayloadSize;
- (id)init;
- (id)initWithSession:(id)arg1 request:(id)arg2 delegate:(id)arg3 delegateQueue:(id)arg4;
- (bool)isCancelled;
- (void)notifyDelegate;
- (unsigned long long)outgoingPayloadSize;
- (id)parsedResponse;
- (float)priority;
- (bool)processFailedReplyXPCDictionary:(id)arg1;
- (bool)processReplyXPCDictionary:(id)arg1;
- (void)processResult:(int)arg1 xpcReply:(id)arg2 error:(id)arg3;
- (void)processTaskCancelled;
- (void)processTaskTimeout;
- (void)processXPCReply:(id)arg1 error:(id)arg2;
- (bool)protocolBufferHasPreamble;
- (id)receivedData;
- (id)remoteAddressAndPort;
- (id)request;
- (id)requestCounterTicket;
- (id)session;
- (id)sessionIsolation;
- (void)setDidNotifyDelegate:(bool)arg1;
- (void)setError:(id)arg1;
- (void)setParsedResponse:(id)arg1;
- (void)setPriority:(float)arg1;
- (void)start;
- (unsigned int)taskIdentifier;
- (unsigned int)taskQueue;
- (float)taskQueuePriority;
- (double)timeoutInterval;
- (unsigned long long)updateXPCRequestIdentifier;
- (void)willSendTask:(id /* block */)arg1;
- (id)xpcRequest;
- (unsigned long long)xpcRequestIdentifier;

@end
